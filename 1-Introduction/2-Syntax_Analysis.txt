Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-01-21T17:03:55-06:00

====== 2-Syntax Analysis ======
Created Tuesday 21 January 

**Syntax Analysis = Parser**
* Operates over symbols
* Tokens generated by the scanner
* Builds a parse tree of some program

Do this via Context Free Languages (CFL), which we will then evaulate via a PDA
* Useful because a CFL can set the rules for ANY programming language

**Example:**
Assumptions: no decimals, id starts with a single, case-insensitive letter

<asmt> 	→  <id> := <expr>
<expr> 	→ <expr> + <expr> | <expr> * <expr> | (<expr>) | <id> | <const>
<id> 	→ <letter> | <id><letter> | <id><digit>	//must start with letter
<letter> 	→ a | b | c | d | ... | z
<digit> 	→ 0 | ... | 9
<const>	→ <digit> | <const><digit>

Nontermials:	6   (something that appears in the left-hand side of the rule)
Terminals:	42 (everything but the nontermials, :=+*( )abc...0...9 )
Rules:		47
Start symbol	<asmt>

**Parse Tree:**

			<asmt>
			/	|  |   		\
		<id>	:  =		<expr>
		/  |				/	|	\
	<id>  <digit>       <expr>   +	<expr>
	   |		|		  |			/	|	\
	<letter>   2		<id>     <expr>     *	<expr>
	   |				  |||		  |||			  |||
	   x				y57		256			z4y9

Note: ||| is basically just "figure it out"

A lot of this (going from <id> down to the specifics, is actually done by the scanner!!
* We deal with tokens (symbols?), not really terminals

With this, the parse tree becomes:

			<asmt>
			/	|  |   		\
		<id>	:  =		<expr>
		   |				/	|	\
		<.>		        <expr>   +	<expr>
					  |			/	|	\
					<id>     <expr>     *	<expr>
						|			|			|
					  <.>	<const>		     <id>
									  |			|
								<.>			<.>

Where <.> just means a pointer to the symbol table
SymTable:
256		<const>
x2		<id>
y57		<id>
zry9		<id>

